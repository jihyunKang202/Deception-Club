#include <stdio.h>//10장 1번
#pragma warning(disable:4996)
void insert(int n, int data[]);
int find(int data[], int n, int k);
int main()
{
	int data[100], n = 0;
	while (1)
	{
		scanf("%d", &data[n]);
		if (data[n] == -1)
			break;
		if (find(data, n, data[n]) == -1)
			insert(n, data);
		else
			printf("%d\n", find(data, n, data[n]));
		n++;
	}
}
void insert(int n, int data[])
{
	for(int i=n-1;i>=0;i--)
		for(int j=0;j<=i;j++)
			if (data[j] > data[j + 1])
			{
				int tmp = data[j]; data[j] = data[j + 1]; data[j + 1] = tmp;
			}
	printf("%d ", data[0]);
	for (int k = 1; k <= n; k++)
		if (data[k] != data[k - 1])
			printf("%d ", data[k]);
}
int find(int data[], int n, int k)
{
	int i;
	for(i=0;i<n;i++)
		if (data[i] == k)
		{
			printf("duplicate entry : ");
			return i;
		}
	return -1;
}







#include <stdio.h>//10강 3번
#pragma warning(disable:4996)
int intersect(int lx1, int ly1, int lx2, int ly2, int vx1, int vy1, int vx2, int vy2);
void main()
{
	int n, a, b, c, d, lx1[100], ly1[100], lx2[100], ly2[100], l = 0, vx1[100], vy1[100], vx2[100], vy2[100], v = 0;
	FILE*fp = fopen("input3.txt", "r");
	fscanf(fp, "%d", &n);
	for(int i=0;i<n;i++)
	{
		fscanf(fp, "%d%d%d%d",&a, &b, &c, &d);
		if (b == d) { lx1[l] = a; ly1[l] = b; lx2[l] = c; ly2[l] = d; l++; }
		else if (a == c) { vx1[v] = a; vy1[v] = b; vx2[v] = c; vy2[v] = d; v++; }
	}
	fclose(fp);
	int intersect_x[100], intersect_y[100], k = 0;
	for (int i = 0; i < l; i++)
		for (int j = 0; j < v; j++)
			if (intersect(lx1[i], ly1[i], lx2[i], ly2[i], vx1[j], vy1[j], vx2[j], vy2[j]) == 1)
			{
				intersect_x[k] = vx1[j]; intersect_y[k] = ly1[i];
				k++;
			}
	for (int i = k-1; i > 0; i--)
		for (int j = 0; j < i; j++)
			if (intersect_x[j] > intersect_x[j + 1])
			{
				int tmp = intersect_x[j]; intersect_x[j] = intersect_x[j + 1]; intersect_x[j + 1] = tmp;
				int tmp2 = intersect_y[j]; intersect_y[j] = intersect_y[j + 1]; intersect_y[j + 1] = tmp2;
			}
	for (int i = 0; i < k; i++)
		printf("[%d , %d]\n", intersect_x[i], intersect_y[i]);
}
int intersect(int lx1, int ly1, int lx2, int ly2, int vx1, int vy1, int vx2, int vy2)//두선분이 교차하는지
{

	if (lx1 <= vx1 && vx1 <= lx2 && vy1 <= ly1 && ly1 <= vy2)
		return 1;
	return 0;
}




#include <stdio.h>//10강 5번
#pragma warning(disable:4996)
int check(int x, int y, int dir, int move, int count[][100]);
void main()
{
	int x = 0, y = 0, dir, move, count[100][100] = { 0 };
	while (1)
	{
		scanf("%d%d", &dir, &move);
		if (dir == -1 && move == -1)
			break;
		if (check(x, y, dir, move, count) == 0)
		{
			if (dir == 0)
			{
				for (int i = 0; i < move; i++)
					count[x][y++] = 1;
			}
			else if (dir == 1)
			{
				for (int i = 0; i < move; i++)
					count[x++][y] = 1;
			}
			else if (dir == 2)
			{
				for (int i = 0; i < move; i++)
					count[x][y--] = 1;
			}
			else if (dir == 3)
			{
				for (int i = 0; i < move; i++)
					count[x--][y] = 1;
			}
			printf("%d %d\n", x, y);
		}
		else
			printf("invalid move");
	}
}
int check(int x, int y, int dir, int move, int count[][100])
{
	if (dir == 0)
		for (int i = 0; i <= move; i++)
		{
			if (count[x][y] == 1)
				return 1;
			y++;
		}
	else if (dir == 1)
		for (int i = 0; i <= move; i++)
		{
			if (count[x][y] == 1)
				return 1;
			x++;
		}
	else if (dir == 2)
		for (int i = 0; i <= move; i++)
		{
			if (count[x][y] == 1)
				return 1;
			y--;
		}
	else if (dir == 3)
		for (int i = 0; i <= move; i++)
		{
			if (count[x][y] == 1)
				return 1;
			x--;
		}
	return 0;
}